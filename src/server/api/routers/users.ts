import { z } from "zod";

import { createTRPCRouter, publicProcedure } from "~/server/api/trpc";

import type { User } from "@prisma/client";

export const userRouter = createTRPCRouter({
  getUsers: publicProcedure.query(({ ctx }) => {
    return ctx.prisma.user.findMany();
  }),
  getUniqueUser: publicProcedure
    .input(z.object({ userId: z.string() }))
    .query(async ({ ctx, input }) => {
      const { userId } = input;
      let user = await ctx.prisma.user.findUnique({
        where: {
          id: userId,
        },
      });
      // if user doesnt exist then create one
      // the userId is generated by clerk and will always be unique
      if (!user) {
        await ctx.prisma.user.create({
          data: {
            id: userId,
            username: "",
          },
        });
        user = {
          id: userId,
          username: "",
        };
      }

      return user;
    }),
});
